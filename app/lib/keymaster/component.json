{
  "name": "keymaster",
  "description": "library for defining and dispatching keyboard shortcuts",
  "version": "1.0.2",
  "author": {
    "name": "Thomas Fuchs",
    "url": "http://mir.aculo.us"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/madrobby/keymaster"
  },
  "main": "./keymaster.js",
  "ender": "./ender.js",
  "readme": "# keymaster.js\n\nKeymaster is a simple (100 LoC or so) micro-library for defining and\ndispatching keyboard shortcuts. It has no dependencies.\n\n*It’s a work in progress (e.g. beta), so spare me your nerdrage and instead\ncontribute! Patches are welcome, but they are not guaranteed to make\nit in.*\n\n## Usage\n\nInclude `keymaster.min.js` in your web app, by loading it as usual:\n\n```html\n<script src=\"keymaster.min.js\"></script>\n```\n\nKeymaster has no dependencies and can be used completely standalone.\nIt should not interfere with any JavaScript libraries or frameworks.\n\n## Defining shortcuts\n\nOne global method is exposed, `key` which defines shortcuts when\ncalled directly. \n\n```javascript\n// define short of 'a'\nkey('a', function(){ alert('you pressed a!') });\n\n// returning false stops the event and prevents default browser events\nkey('ctrl+r', function(){ alert('stopped reload!'); return false });\n\n// multiple shortcuts that do the same thing\nkey('⌘+r, ctrl+r', function(){ });\n```\n\nThe handler method is called with two arguments set, the keydown `event` fired, and\nan object containing, among others, the following two properties:\n\n`shortcut`: a string that contains the shortcut used, e.g. `ctrl+r`\n`scope`: a string describing the scope (or `all`)\n\n```javascript\nkey('⌘+r, ctrl+r', function(event, handler){\n  console.log(handler.shortcut, handler.scope);\n});\n\n// \"ctrl+r\", \"all\"\n```\n\n## Supported keys\n\nKeymaster understands the following modifiers:\n`⇧`, `shift`, `option`, `⌥`, `alt`, `ctrl`, `control`, `command`, and `⌘`.\n\nThe following special keys can be used for shortcuts:\n`backspace`, `tab`, `clear`, `enter`, `return`, `esc`, `escape`, `space`,\n`up`, `down`, `left`, `right`, `home`, `end`, `pageup`, `pagedown`, `del`, `delete`\nand `f1` through `f19`.\n\n## Modifier key queries\n\nAt any point in time (even in code other than key shortcut handlers),\nyou can query the `key` object for the state of modifier keys. This\nallows easy implementation of things like shift+click handlers. For example,\n`key.shift` is `true` if the shift key is currently pressed.\n\n```javascript\nif(key.shift) alert('shift is pressed, OMGZ!');\n```\n\n## Scopes\n\nIf you want to reuse the same shortcut for seperate areas in your single page app,\nKeymaster supports switching between scopes. Use the `key.setScope` method to set scope.\n\n```javascript\n// define shortcuts with a scope\nkey('o, enter', 'issues', function(){ /* do something */ });\nkey('o, enter', 'files', function(){ /* do something else */ });\n\n// set the scope (only 'all' and 'issues' shortcuts will be honored)\nkey.setScope('issues'); // default scope is 'all'\n```\n\n## Filter key presses \n\nBy default, when an `INPUT`, `SELECT` or `TEXTAREA` element is focused, Keymaster doesn't process any shortcuts.\n\nYou can change this by overwriting `key.filter` with a new function. This function is called before\nKeymaster processes shortcuts, with the keydown event as argument.\n\nIf your function returns false, then the no shortcuts will be processed.\n\nHere's the default implementation for reference:\n\n```javascript\nfunction filter(event){\n  var tagName = (event.target || event.srcElement).tagName;\n  return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\n}\n```\n\nIf you only want _some_ shortcuts to work while in a input element, you change the scope in the \nkey.filter function; however a more robust way to handle this is to use proper\nfocus and blur event handlers on your input element, and change scopes there as you see fit.\n\n## Notes\n\nKeymaster should work with any browser that fires `keyup` and `keydown` events,\nand is tested with IE (6+), Safari, Firefox and Chrome.\n\nSee [http://madrobby.github.com/keymaster/](http://madrobby.github.com/keymaster/) for a live demo.\n\n## CoffeeScript\n\nIf you're using CoffeeScript, configuring key shortcuts couldn't be simpler:\n\n```coffeescript\nkey 'a', -> alert('you pressed a!')\n\nkey '⌘+r, ctrl+r', ->\n  alert 'stopped reload!'\n  off\n\nkey 'o, enter', 'issues', ->\n  whatevs()\n\nalert 'shift is pressed, OMGZ!' if key.shift\n```\n\n## Ender support\n\nAdd `keymaster` as a top level method to your [Ender](http://ender.no.de) compilation.\n\n    $ ender add keymaster\n\nUse it:\n\n``` js\n$.key('⌘+r', function () {\n  alert('reload!')\n})\n```\n\n## Contributing\n\nTo contribute, please fork Keymaster, add your patch and tests for it (in the `test/` folder) and\nsubmit a pull request.\n\n## TODOs\n\n* Finish test suite\n\nKeymaster is (c) 2011 Thomas Fuchs and may be freely distributed under the MIT license.\nSee the `MIT-LICENSE` file.\n",
  "readmeFilename": "README.markdown",
  "_id": "keymaster@1.0.2"
}